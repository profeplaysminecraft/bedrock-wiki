import{_ as r,c as l,a as e,w as n,e as a,r as o,o as c,d as s}from"./404.md.f26da307.js";const p="/assets/images/commands/timers/timer.gif",k=JSON.parse('{"title":"Command Timers","description":"","frontmatter":{"title":"Command Timers","category":"General","tags":["experimental"],"mention":["Hatchibombotar"]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"How to make them","slug":"how-to-make-them","link":"#how-to-make-them","children":[{"level":3,"title":"Start timer","slug":"start-timer","link":"#start-timer","children":[]},{"level":3,"title":"Counting Down","slug":"counting-down","link":"#counting-down","children":[]},{"level":3,"title":"Running commands when the timer is over","slug":"running-commands-when-the-timer-is-over","link":"#running-commands-when-the-timer-is-over","children":[]},{"level":3,"title":"Running commands when the timer is running","slug":"running-commands-when-the-timer-is-running","link":"#running-commands-when-the-timer-is-running","children":[]}]},{"level":2,"title":"End result","slug":"end-result","link":"#end-result","children":[]}],"relativePath":"commands/timers.md"}'),d={name:"commands/timers.md"},m=a('<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This document covers experimental features, for 1.19.10+ mcfunctions.</p></div><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>When creating mechanics or waiting for a set amount of time, it can be useful to create timers using only mcfunction files.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This page is for using commands to create timers, for entity timers, look at <a href="/entities/timers.html">this page</a></p></div><h2 id="how-to-make-them" tabindex="-1">How to make them <a class="header-anchor" href="#how-to-make-them" aria-hidden="true">#</a></h2><h3 id="start-timer" tabindex="-1">Start timer <a class="header-anchor" href="#start-timer" aria-hidden="true">#</a></h3>',6),u=a(`<div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">scoreboard objectives add timer dummy</span></span>
<span class="line"><span style="color:#A6ACCD;">scoreboard players set value timer 100</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>To start your timer, you need to create the scoreboard, and set the value that you are going to count down from.</p><p>The time left on the timer (currently set here as 100) should be in ticks.</p><p>20 ticks = 1 second (5s * 20 = 100)</p><h3 id="counting-down" tabindex="-1">Counting Down <a class="header-anchor" href="#counting-down" aria-hidden="true">#</a></h3>`,5),h=a(`<div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">scoreboard players remove value timer 1</span></span>
<span class="line"><span style="color:#A6ACCD;">execute if score value timer matches 0.. run function timer_events</span></span>
<span class="line"><span style="color:#A6ACCD;">execute if score value timer matches -1 run scoreboard objectives remove timer</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Each tick, you want the timer to go down by 1. And, as long as the timer is above 0, you run the timer events. Once the timer gets to -1, remove the scoreboard</p>`,2),_=a(`<div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">values</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">timer_tick</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>In order to get the <code>timer_tick</code> function to run every tick, you need to include it in your <code>tick.json</code> file.</p><h3 id="running-commands-when-the-timer-is-over" tabindex="-1">Running commands when the timer is over <a class="header-anchor" href="#running-commands-when-the-timer-is-over" aria-hidden="true">#</a></h3>`,3),b=a(`<div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">execute if score value timer matches 0 run function timer_up</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Inside your <code>timer_events</code> file, you want to run a command once the timer reaches 0. The <code>timer_up</code> function include the commands you want to run once it has finished.</p><h3 id="running-commands-when-the-timer-is-running" tabindex="-1">Running commands when the timer is running <a class="header-anchor" href="#running-commands-when-the-timer-is-running" aria-hidden="true">#</a></h3><p>You could also run commands while the timer is running:</p>`,4),g=a(`<div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">execute if score value timer matches 50 run say Half Way!</span></span>
<span class="line"><span style="color:#A6ACCD;">execute if score value timer matches 0 run say Finished!</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="end-result" tabindex="-1">End result <a class="header-anchor" href="#end-result" aria-hidden="true">#</a></h2><p><img src="`+p+'" alt=""></p><p>You can also view an example timer pack here:</p>',4);function C(v,y,f,A,D,T){const t=o("CodeHeader"),i=o("BButton");return c(),l("div",null,[m,e(t,null,{default:n(()=>[s("BP/functions/timer_start.mcfunction")]),_:1}),u,e(t,null,{default:n(()=>[s("BP/functions/timer_tick.mcfunction")]),_:1}),h,e(t,null,{default:n(()=>[s("BP/functions/tick.json")]),_:1}),_,e(t,null,{default:n(()=>[s("BP/functions/timer_events.mcfunction")]),_:1}),b,e(t,null,{default:n(()=>[s("BP/functions/timer_events.mcfunction")]),_:1}),g,e(i,{link:"https://github.com/Bedrock-OSS/wiki-addon/releases/download/download/mcfunction_timers.mcpack",color:"gray"},{default:n(()=>[s("Download Example Pack")]),_:1})])}const S=r(d,[["render",C]]);export{k as __pageData,S as default};
